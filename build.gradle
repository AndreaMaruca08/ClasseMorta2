plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.6' // Verifica che questa versione sia quella desiderata
    id 'io.spring.dependency-management' version '1.1.3'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21) // Usa Java 21
    }
}

group = 'app.classeMorta'
version = '1.0.0'
sourceCompatibility = '21' // Java 21

repositories {
    mavenCentral()
}

dependencies {
    // Dipendenze Spring principali
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'com.h2database:h2:2.2.220'

    // JFreeChart per grafici
    implementation 'org.jfree:jfreechart:1.5.4'

    // Jsoup HTML Parser
    implementation 'org.jsoup:jsoup:1.16.1' // Includi la versione corretta di Jsoup

    // Lombok per ridurre il boilerplate
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Aggiungi Lombok anche per i test
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Driver PostgreSQL
    runtimeOnly 'org.postgresql:postgresql'

    // Librerie per test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["--enable-preview"]
}

tasks.withType(Test) {
    jvmArgs += ["--enable-preview"]
}

tasks.withType(JavaExec) {
    jvmArgs += ["--enable-preview"]
}

// Configura la classe principale del JAR
bootJar {
    mainClass.set("app.classeMorta.ClasseMorta.logic.WebApplication") // Oppure UIApplication in base alle tue esigenze
}
bootJar {
    archiveBaseName.set("ClasseMorta")
    archiveVersion.set("") // Rimuove la versione dal nome del file
    archiveClassifier.set("") // Evita di aggiungere classificatori
}